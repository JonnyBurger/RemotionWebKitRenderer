{"version":3,"file":"535.bundle.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AACA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAOA","sources":["./src/OfflineAudioBuffer/index.tsx"],"sourcesContent":["import {AbsoluteFill, interpolate} from 'remotion';\nimport {useCallback, useEffect, useState} from 'react';\nimport {Audio, continueRender, delayRender, useVideoConfig} from 'remotion';\nimport {audioBufferToDataUrl} from '@remotion/media-utils';\n\nconst C4_FREQUENCY = 261.63;\nconst sampleRate = 44100;\n\nexport const OfflineAudioBufferExample: React.FC = () => {\n\tconst [handle] = useState(() => delayRender());\n\tconst [audioBuffer, setAudioBuffer] = useState<string | null>(null);\n\tconst {fps, durationInFrames} = useVideoConfig();\n\tconst lengthInSeconds = durationInFrames / fps;\n\n\tconst renderAudio = useCallback(async () => {\n\t\tconst offlineContext = new OfflineAudioContext({\n\t\t\tnumberOfChannels: 2,\n\t\t\tlength: sampleRate * lengthInSeconds,\n\t\t\tsampleRate,\n\t\t});\n\t\tconst oscillatorNode = offlineContext.createOscillator();\n\t\tconst gainNode = offlineContext.createGain();\n\t\toscillatorNode.connect(gainNode);\n\t\tgainNode.connect(offlineContext.destination);\n\t\tgainNode.gain.setValueAtTime(0.5, offlineContext.currentTime);\n\n\t\toscillatorNode.type = 'sine';\n\t\toscillatorNode.frequency.value = C4_FREQUENCY;\n\n\t\tconst {currentTime} = offlineContext;\n\t\toscillatorNode.start(currentTime);\n\t\toscillatorNode.stop(currentTime + lengthInSeconds);\n\n\t\tconst buffer = await offlineContext.startRendering();\n\t\tsetAudioBuffer(audioBufferToDataUrl(buffer));\n\n\t\tcontinueRender(handle);\n\t}, [handle, lengthInSeconds]);\n\n\tuseEffect(() => {\n\t\trenderAudio();\n\t}, [renderAudio]);\n\n\treturn (\n\t\t<AbsoluteFill>\n\t\t\t{audioBuffer && (\n\t\t\t\t<Audio\n\t\t\t\t\tsrc={audioBuffer}\n\t\t\t\t\tstartFrom={0}\n\t\t\t\t\tendAt={100}\n\t\t\t\t\tvolume={(f) =>\n\t\t\t\t\t\tinterpolate(f, [0, 50, 100], [0, 1, 0], {\n\t\t\t\t\t\t\textrapolateLeft: 'clamp',\n\t\t\t\t\t\t\textrapolateRight: 'clamp',\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t)}\n\t\t\t<AbsoluteFill\n\t\t\t\tstyle={{\n\t\t\t\t\tfontFamily: 'Helvetica, Arial',\n\t\t\t\t\tfontSize: 50,\n\t\t\t\t\tcolor: 'white',\n\t\t\t\t\tjustifyContent: 'center',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tRender sound from offline audio buffer\n\t\t\t</AbsoluteFill>\n\t\t</AbsoluteFill>\n\t);\n};\n\nexport default OfflineAudioBufferExample;\n"],"names":[],"sourceRoot":""}